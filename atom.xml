<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>glkwhr&#39;s Blog</title>
  <subtitle>Stay Simple</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.glkwhr.com/"/>
  <updated>2017-06-10T01:21:57.370Z</updated>
  <id>http://blog.glkwhr.com/</id>
  
  <author>
    <name>glkwhr</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Single Number III</title>
    <link href="http://blog.glkwhr.com/2017/05/23/single-number-iii/"/>
    <id>http://blog.glkwhr.com/2017/05/23/single-number-iii/</id>
    <published>2017-05-23T19:20:10.000Z</published>
    <updated>2017-06-10T01:21:57.370Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a><a href="https://leetcode.com/problems/single-number-iii" target="_blank" rel="external">Problem</a></h2><blockquote>
<p>Given an array of numbers nums, in which exactly two elements appear only once and all the other elements appear exactly twice. Find the two elements that appear only once.</p>
<p>For example:</p>
<ul>
<li>Given nums = <code>[1, 2, 1, 3, 2, 5]</code>, return <code>[3, 5]</code>.</li>
</ul>
<p>Note:</p>
<ul>
<li>The order of the result is not important. So in the above example, <code>[5, 3]</code> is also correct.</li>
<li>Your algorithm should run in linear runtime complexity. Could you implement it using only constant space complexity?</li>
</ul>
</blockquote>
<a id="more"></a>
<h2 id="Idea"><a href="#Idea" class="headerlink" title="Idea"></a>Idea</h2><p>Suppose <code>C = A ^ B</code>, then the <code>1</code> bits in <code>C</code> are exactly the ones that only exist in either <code>A</code> or <code>B</code> (<code>C</code> cannot be <code>0</code> or <code>A</code> and <code>B</code> would be the same). It is because all other elements appearing twice are turned into <code>0</code> during the XOR process. The XOR result <code>C</code> is actually the XOR of the only two elements each appearing once. </p>
<p>Thus, for whichever <code>1</code> bit in <code>C</code>, <code>having it or not</code> can be the condition for dividing those elements into <code>Group A</code>(which containing <code>A</code>) and <code>Group B</code> (which containing <code>B</code>). As per to the explanation above, the XOR result of those elements in <code>Group A</code> (except for <code>A</code>) would be <code>0</code>, and the XOR of all elements in <code>Group A</code> would be <code>A</code>. It’s the same story in <code>Group B</code>.</p>
<h2 id="Java-Code"><a href="#Java-Code" class="headerlink" title="Java Code"></a>Java Code</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] singleNumber(<span class="keyword">int</span>[] nums) &#123;</div><div class="line">        <span class="keyword">int</span> c = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> num : nums) &#123;</div><div class="line">            c ^= num;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// get the lowest "1" bit of C</span></div><div class="line">        c &amp;= -c;</div><div class="line">        <span class="comment">// rets[0], rets[1] would be the XOR results of Group A and Group B</span></div><div class="line">        <span class="keyword">int</span>[] rets = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> num : nums) &#123;</div><div class="line">            <span class="keyword">if</span> ((num &amp; c) == <span class="number">0</span>) &#123;</div><div class="line">                rets[<span class="number">0</span>] ^= num;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> &#123;</div><div class="line">                rets[<span class="number">1</span>] ^= num;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> rets;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><strong>Trick of getting the lowest <code>1</code> bit of C</strong><br>– For a positive integer <code>C</code>, <code>-C</code> would be stored as <code>2&#39;s complement</code> of <code>C</code> and with the highest bit (sign bit) set to <code>1</code>. To compute the <code>2&#39;s complement</code> of an integer, simply keep the trailing <code>0</code>s and the lowest <code>1</code> bit unchanged, and then revert all the higher bits. So, <code>C &amp; (-C)</code> would be the lowest <code>1</code> bit of <code>C</code>.</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Problem&quot; class=&quot;headerlink&quot; title=&quot;Problem&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://leetcode.com/problems/single-number-iii&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Problem&lt;/a&gt;&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Given an array of numbers nums, in which exactly two elements appear only once and all the other elements appear exactly twice. Find the two elements that appear only once.&lt;/p&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Given nums = &lt;code&gt;[1, 2, 1, 3, 2, 5]&lt;/code&gt;, return &lt;code&gt;[3, 5]&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The order of the result is not important. So in the above example, &lt;code&gt;[5, 3]&lt;/code&gt; is also correct.&lt;/li&gt;
&lt;li&gt;Your algorithm should run in linear runtime complexity. Could you implement it using only constant space complexity?&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Tech" scheme="http://blog.glkwhr.com/categories/Tech/"/>
    
    
      <category term="algorithm" scheme="http://blog.glkwhr.com/tags/algorithm/"/>
    
      <category term="leetcode" scheme="http://blog.glkwhr.com/tags/leetcode/"/>
    
      <category term="bit-manipulation" scheme="http://blog.glkwhr.com/tags/bit-manipulation/"/>
    
  </entry>
  
</feed>
